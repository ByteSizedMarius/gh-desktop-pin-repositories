---
 app/src/lib/app-state.ts                      |  5 ++
 app/src/lib/local-storage.ts                  |  3 +
 app/src/lib/stores/app-store.ts               |  2 +
 app/src/lib/stores/repository-pinning.ts      | 57 +++++++++++++++++
 app/src/ui/app.tsx                            |  2 +
 app/src/ui/lib/section-filter-list.tsx        | 19 +++++-
 .../repositories-list/group-repositories.ts   | 62 ++++++++++++++++++-
 .../repositories-list/repositories-list.tsx   | 60 ++++++++++++++++--
 .../repository-list-item-context-menu.ts      | 33 ++++++++++
 9 files changed, 234 insertions(+), 9 deletions(-)
 create mode 100644 app/src/lib/stores/repository-pinning.ts

diff --git a/app/src/lib/app-state.ts b/app/src/lib/app-state.ts
index 70a339a157..508a15a1b8 100644
--- a/app/src/lib/app-state.ts
+++ b/app/src/lib/app-state.ts
@@ -84,6 +84,11 @@ export interface IAppState {
    */
   readonly recentRepositories: ReadonlyArray<number>
 
+  /**
+   * List of IDs of repos that have been pinned by the user
+   */
+  readonly pinnedRepositories: ReadonlyArray<number>
+
   /**
    * A cache of the latest repository state values, keyed by the repository id
    */
diff --git a/app/src/lib/local-storage.ts b/app/src/lib/local-storage.ts
index efc6c40bba..97b9750d63 100644
--- a/app/src/lib/local-storage.ts
+++ b/app/src/lib/local-storage.ts
@@ -190,6 +190,9 @@ export function setStringArray(key: string, values: ReadonlyArray<string>) {
 /** Default delimiter for stringifying and parsing arrays of numbers */
 const NumberArrayDelimiter = ','
 
+/** Key for the list of pinned repos */
+export const PinnedRepositoriesKey = 'pinned-repositories'
+
 /**
  * Load a (string) enum based on its stored value. See `parseEnumValue` for more
  * details on the conversion. Note that there's no `setEnum` companion method
diff --git a/app/src/lib/stores/app-store.ts b/app/src/lib/stores/app-store.ts
index 69598dedc8..ea48969d18 100644
--- a/app/src/lib/stores/app-store.ts
+++ b/app/src/lib/stores/app-store.ts
@@ -468,6 +468,7 @@ export class AppStore extends TypedBaseStore<IAppState> {
   private accounts: ReadonlyArray<Account> = new Array<Account>()
   private repositories: ReadonlyArray<Repository> = new Array<Repository>()
   private recentRepositories: ReadonlyArray<number> = new Array<number>()
+  private pinnedRepositories: ReadonlyArray<number> = new Array<number>()
 
   private selectedRepository: Repository | CloningRepository | null = null
 
@@ -1035,6 +1036,7 @@ export class AppStore extends TypedBaseStore<IAppState> {
       accounts: this.accounts,
       repositories,
       recentRepositories: this.recentRepositories,
+      pinnedRepositories: this.pinnedRepositories,
       localRepositoryStateLookup: this.localRepositoryStateLookup,
       windowState: this.windowState,
       windowZoomFactor: this.windowZoomFactor,
diff --git a/app/src/lib/stores/repository-pinning.ts b/app/src/lib/stores/repository-pinning.ts
new file mode 100644
index 0000000000..8e97956661
--- /dev/null
+++ b/app/src/lib/stores/repository-pinning.ts
@@ -0,0 +1,57 @@
+import * as LocalStorage from '../local-storage'
+import { Repository } from '../../models/repository'
+
+/** Storage key */
+export const PinnedRepositoriesKey = 'pinned-repositories'
+
+/**
+ * Get list pinned repo IDs
+ */
+export function getPinnedRepositories(): ReadonlyArray<number> {
+  return LocalStorage.getNumberArray(PinnedRepositoriesKey)
+}
+
+/**
+ * Store list of repo IDs
+ */
+export function setPinnedRepositories(
+  repositories: ReadonlyArray<number>
+): void {
+  LocalStorage.setNumberArray(PinnedRepositoriesKey, repositories)
+}
+
+/**
+ * Add repo to list
+ */
+export function addPinnedRepository(repository: Repository): void {
+  const pinnedRepositories = getPinnedRepositories()
+  if (pinnedRepositories.includes(repository.id)) {
+    return
+  }
+
+  const updatedPinnedRepositories = [...pinnedRepositories, repository.id]
+  setPinnedRepositories(updatedPinnedRepositories)
+}
+
+/**
+ * Remove a repo from list
+ */
+export function removePinnedRepository(repository: Repository): void {
+  const pinnedRepositories = getPinnedRepositories()
+  if (!pinnedRepositories.includes(repository.id)) {
+    return
+  }
+
+  const updatedPinnedRepositories = pinnedRepositories.filter(
+    id => id !== repository.id
+  )
+  setPinnedRepositories(updatedPinnedRepositories)
+}
+
+/**
+ * Check if repo is pinned
+ */
+export function isRepositoryPinned(repository: Repository): boolean {
+  const pinnedRepositories = getPinnedRepositories()
+  return pinnedRepositories.includes(repository.id)
+}
\ No newline at end of file
diff --git a/app/src/ui/app.tsx b/app/src/ui/app.tsx
index 520f0d45a8..efe7d62732 100644
--- a/app/src/ui/app.tsx
+++ b/app/src/ui/app.tsx
@@ -11,6 +11,7 @@ import {
 } from '../lib/app-state'
 import { Dispatcher } from './dispatcher'
 import { AppStore, GitHubUserStore, IssuesStore } from '../lib/stores'
+import { getPinnedRepositories } from '../lib/stores/repository-pinning'
 import { assertNever } from '../lib/fatal-error'
 import { shell } from '../lib/app-shell'
 import { updateStore, UpdateStatus } from './lib/update-store'
@@ -2876,6 +2877,7 @@ export class App extends React.Component<IAppProps, IAppState> {
         onSelectionChanged={this.onSelectionChanged}
         repositories={this.state.repositories}
         recentRepositories={this.state.recentRepositories}
+        pinnedRepositories={getPinnedRepositories()}
         localRepositoryStateLookup={this.state.localRepositoryStateLookup}
         askForConfirmationOnRemoveRepository={
           this.state.askForConfirmationOnRepositoryRemoval
diff --git a/app/src/ui/lib/section-filter-list.tsx b/app/src/ui/lib/section-filter-list.tsx
index a2a32e4c1d..b3b1f98d92 100644
--- a/app/src/ui/lib/section-filter-list.tsx
+++ b/app/src/ui/lib/section-filter-list.tsx
@@ -680,6 +680,16 @@ function createStateUpdate<T extends IFilterListItem, GroupIdentifier>(
   const selectedItem = props.selectedItem
   const groupIndices = []
 
+  // Check for a "Pins" group and see if the selected item is in it
+  let isPinnedItemSelected = false
+  if (selectedItem !== null) {
+    const pinsGroupIndex = props.groups.findIndex(g => (g.identifier as any)?.kind === 'pins')
+    if (pinsGroupIndex !== -1) {
+      const pinsGroup = props.groups[pinsGroupIndex]
+      isPinnedItemSelected = pinsGroup.items.some(item => item.id === selectedItem.id)
+    }
+  }
+
   for (const [idx, group] of props.groups.entries()) {
     const groupRows = new Array<IFilterListRow<T, GroupIdentifier>>()
     const items: ReadonlyArray<IMatch<T>> = filter
@@ -702,9 +712,12 @@ function createStateUpdate<T extends IFilterListItem, GroupIdentifier>(
 
     for (const { item, matches } of items) {
       if (selectedItem && item.id === selectedItem.id) {
-        selectedRow = {
-          section,
-          row: groupRows.length,
+        if (((group.identifier as any)?.kind === 'pins') ||
+            ((group.identifier as any)?.kind !== 'pins' && !isPinnedItemSelected)) {
+          selectedRow = {
+            section,
+            row: groupRows.length,
+          }
         }
       }
 
diff --git a/app/src/ui/repositories-list/group-repositories.ts b/app/src/ui/repositories-list/group-repositories.ts
index 393eb51cb3..a84d3b33bb 100644
--- a/app/src/ui/repositories-list/group-repositories.ts
+++ b/app/src/ui/repositories-list/group-repositories.ts
@@ -17,7 +17,7 @@ import { enableMultipleEnterpriseAccounts } from '../../lib/feature-flag'
 
 export type RepositoryListGroup =
   | {
-      kind: 'recent' | 'other'
+      kind: 'recent' | 'other' | 'pins'
     }
   | {
       kind: 'dotcom'
@@ -36,6 +36,8 @@ export type RepositoryListGroup =
 export const getGroupKey = (group: RepositoryListGroup) => {
   const { kind } = group
   switch (kind) {
+    case 'pins':
+      return `-1:pins`
     case 'recent':
       return `0:recent`
     case 'dotcom':
@@ -118,6 +120,64 @@ export function groupRepositories(
     }))
 }
 
+const fallbackValue: ILocalRepositoryState = { aheadBehind: null, changedFilesCount: 0 }
+
+/**
+ * Creates a group of pinned repositories for use with `FilterList` component
+ *
+ * @param pinnedRepositories list of pinned repositories' ids
+ * @param repositories full list of repositories
+ * @param localRepositoryStateLookup cache of local state about full list of repositories
+ */
+export function makePinnedRepositoriesGroup(
+  pinnedRepositories: ReadonlyArray<number>,
+  repositories: ReadonlyArray<Repositoryish>,
+  localRepositoryStateLookup: ReadonlyMap<number, ILocalRepositoryState>
+): IFilterListGroup<IRepositoryListItem, RepositoryListGroup> {
+  const names = new Map<string, number>()
+  for (const id of pinnedRepositories) {
+    const repository = repositories.find(r => r.id === id)
+    if (repository !== undefined) {
+      const alias = repository instanceof Repository ? repository.alias : null
+      const name = alias ?? repository.name
+      const existingCount = names.get(name) || 0
+      names.set(name, existingCount + 1)
+    }
+  }
+
+  const items = new Array<IRepositoryListItem>()
+
+  for (const id of pinnedRepositories) {
+    const repository = repositories.find(r => r.id === id)
+    if (repository === undefined) {
+      continue
+    }
+
+    const { aheadBehind, changedFilesCount } =
+      localRepositoryStateLookup.get(id) || fallbackValue
+    const repositoryAlias =
+      repository instanceof Repository ? repository.alias : null
+    const repositoryText =
+      repository instanceof Repository
+        ? [repositoryAlias ?? repository.name, nameOf(repository)]
+        : [repository.name]
+    const nameCount = names.get(repositoryAlias ?? repository.name) || 0
+    items.push({
+      text: repositoryText,
+      id: id.toString(),
+      repository,
+      needsDisambiguation: nameCount > 1,
+      aheadBehind,
+      changedFilesCount,
+    })
+  }
+
+  return {
+    identifier: { kind: 'pins' },
+    items,
+  }
+}
+
 // Returns the display title for a repository, which is either the alias
 // (if available) or the name.
 const getDisplayTitle = (r: Repositoryish) =>
diff --git a/app/src/ui/repositories-list/repositories-list.tsx b/app/src/ui/repositories-list/repositories-list.tsx
index d5e6a10273..1117907211 100644
--- a/app/src/ui/repositories-list/repositories-list.tsx
+++ b/app/src/ui/repositories-list/repositories-list.tsx
@@ -7,7 +7,13 @@ import {
   Repositoryish,
   RepositoryListGroup,
   getGroupKey,
+  makePinnedRepositoriesGroup,
 } from './group-repositories'
+import {
+  addPinnedRepository,
+  removePinnedRepository,
+  getPinnedRepositories
+} from '../../lib/stores/repository-pinning'
 import { IFilterListGroup } from '../lib/filter-list'
 import { IMatches } from '../../lib/fuzzy-find'
 import { ILocalRepositoryState, Repository } from '../../models/repository'
@@ -33,6 +39,7 @@ interface IRepositoriesListProps {
   readonly selectedRepository: Repositoryish | null
   readonly repositories: ReadonlyArray<Repositoryish>
   readonly recentRepositories: ReadonlyArray<number>
+  readonly pinnedRepositories: ReadonlyArray<number>
 
   /** A cache of the latest repository state values, keyed by the repository id */
   readonly localRepositoryStateLookup: ReadonlyMap<
@@ -78,6 +85,7 @@ interface IRepositoriesListProps {
 
 interface IRepositoriesListState {
   readonly newRepositoryMenuExpanded: boolean
+  readonly pinnedRepositoriesIds: ReadonlyArray<number>
   readonly selectedItem: IRepositoryListItem | null
 }
 
@@ -148,6 +156,7 @@ export class RepositoriesList extends React.Component<
 
     this.state = {
       newRepositoryMenuExpanded: false,
+      pinnedRepositoriesIds: getPinnedRepositories(),
       selectedItem: null,
     }
   }
@@ -168,7 +177,9 @@ export class RepositoriesList extends React.Component<
 
   private getGroupLabel(group: RepositoryListGroup) {
     const { kind } = group
-    if (kind === 'enterprise') {
+    if (kind === 'pins') {
+      return 'Pins'
+    } else if (kind === 'enterprise') {
       return enableMultipleEnterpriseAccounts() ? group.host : 'Enterprise'
     } else if (kind === 'other') {
       return 'Other'
@@ -177,7 +188,7 @@ export class RepositoriesList extends React.Component<
     } else if (kind === 'recent') {
       return 'Recent'
     } else {
-      assertNever(kind, `Unknown repository group kind ${kind}`)
+      return assertNever(kind, `Unknown repository group kind ${kind}`)
     }
   }
 
@@ -213,6 +224,17 @@ export class RepositoriesList extends React.Component<
   ) => {
     event.preventDefault()
 
+    // Check if the repository is pinned using our local state
+    const isPinned = item.repository instanceof Repository &&
+      this.state.pinnedRepositoriesIds.includes(item.repository.id)
+
+    // Create context menu handlers for pin/unpin
+    const pinHandler = item.repository instanceof Repository ?
+      this.onPinRepository : undefined
+
+    const unpinHandler = item.repository instanceof Repository ?
+      this.onUnpinRepository : undefined
+
     const items = generateRepositoryListContextMenu({
       onRemoveRepository: this.props.onRemoveRepository,
       onShowRepository: this.props.onShowRepository,
@@ -226,6 +248,9 @@ export class RepositoriesList extends React.Component<
       onViewOnGitHub: this.props.onViewOnGitHub,
       repository: item.repository,
       shellLabel: this.props.shellLabel,
+      onPinRepository: pinHandler,
+      onUnpinRepository: unpinHandler,
+      isPinned,
     })
 
     showContextualMenu(items)
@@ -248,6 +273,17 @@ export class RepositoriesList extends React.Component<
       this.props.recentRepositories
     )

+    // Add Pins group if we have any pinned repositories
+    let finalGroups = groups
+    if (this.state.pinnedRepositoriesIds.length > 0) {
+      const pinnedGroup = makePinnedRepositoriesGroup(
+        this.state.pinnedRepositoriesIds,
+        this.props.repositories,
+        this.props.localRepositoryStateLookup
+      )
+      finalGroups = [pinnedGroup, ...groups]
+    }
+
     // So there's two types of selection at play here. There's the repository
     // selection for the whole app and then there's the keyboard selection in
     // the list itself. If the user has selected a repository using keyboard
@@ -255,7 +291,7 @@ export class RepositoriesList extends React.Component<
     // repository yet we'll select the repository currently selected in the app.
     const selectedItem =
       this.state.selectedItem ??
-      this.getSelectedListItem(groups, this.props.selectedRepository)
+      this.getSelectedListItem(finalGroups, this.props.selectedRepository)
 
     return (
       <div className="repository-list">
@@ -269,13 +305,13 @@ export class RepositoriesList extends React.Component<
           onItemClick={this.onItemClick}
           renderPostFilter={this.renderPostFilter}
           renderNoItems={this.renderNoItems}
-          groups={groups}
+          groups={finalGroups}
           invalidationProps={{
             repositories: this.props.repositories,
             filterText: this.props.filterText,
           }}
           onItemContextMenu={this.onItemContextMenu}
-          getGroupAriaLabel={this.getGroupAriaLabelGetter(groups)}
+          getGroupAriaLabel={this.getGroupAriaLabelGetter(finalGroups)}
           getItemAriaLabel={this.getItemAriaLabel}
           onSelectionChanged={this.onSelectionChanged}
         />
@@ -382,4 +418,18 @@ export class RepositoriesList extends React.Component<
   private onRemoveRepositoryAlias = (repository: Repository) => {
     this.props.dispatcher.changeRepositoryAlias(repository, null)
   }
+
+  private onPinRepository = (repository: Repository) => {
+    addPinnedRepository(repository)
+    this.setState(prevState => ({
+      pinnedRepositoriesIds: getPinnedRepositories()
+    }))
+  }
+
+  private onUnpinRepository = (repository: Repository) => {
+    removePinnedRepository(repository)
+    this.setState(prevState => ({
+      pinnedRepositoriesIds: getPinnedRepositories()
+    }))
+  }
 }
diff --git a/app/src/ui/repositories-list/repository-list-item-context-menu.ts b/app/src/ui/repositories-list/repository-list-item-context-menu.ts
index 6ee52c5351..973b35dc33 100644
--- a/app/src/ui/repositories-list/repository-list-item-context-menu.ts
+++ b/app/src/ui/repositories-list/repository-list-item-context-menu.ts
@@ -20,6 +20,9 @@ interface IRepositoryListItemContextMenuConfig {
   onRemoveRepository: (repository: Repositoryish) => void
   onChangeRepositoryAlias: (repository: Repository) => void
   onRemoveRepositoryAlias: (repository: Repository) => void
+  onPinRepository?: (repository: Repository) => void
+  onUnpinRepository?: (repository: Repository) => void
+  isPinned?: boolean
 }
 
 export const generateRepositoryListContextMenu = (
@@ -36,8 +39,38 @@ export const generateRepositoryListContextMenu = (
     ? `Open in ${config.shellLabel}`
     : DefaultShellLabel
 
+  const pinItems: Array<IMenuItem> = []
+
+  // Only add pin/unpin options for Repository objects (not CloningRepository)
+  if (repository instanceof Repository) {
+    if (config.isPinned && config.onUnpinRepository) {
+      pinItems.push({
+        label: __DARWIN__ ? 'Unpin Repository' : 'Unpin repository',
+        action: () => {
+          if (config.onUnpinRepository) {
+            config.onUnpinRepository(repository)
+          }
+        },
+      })
+    } else if (!config.isPinned && config.onPinRepository) {
+      pinItems.push({
+        label: __DARWIN__ ? 'Pin Repository' : 'Pin repository',
+        action: () => {
+          if (config.onPinRepository) {
+            config.onPinRepository(repository)
+          }
+        },
+      })
+    }
+
+    if (pinItems.length > 0) {
+      pinItems.push({ type: 'separator' })
+    }
+  }
+
   const items: ReadonlyArray<IMenuItem> = [
     ...buildAliasMenuItems(config),
+    ...pinItems,
     {
       label: __DARWIN__ ? 'Copy Repo Name' : 'Copy repo name',
       action: () => clipboard.writeText(repository.name),
diff --git a/app/src/ui/repositories-list/group-repositories.ts b/app/src/ui/repositories-list/group-repositories.ts
index a84d3b33bb..ce8b044cb5 100644
--- a/app/src/ui/repositories-list/group-repositories.ts
+++ b/app/src/ui/repositories-list/group-repositories.ts
@@ -63,8 +63,6 @@ export interface IRepositoryListItem extends IFilterListItem {
   readonly changedFilesCount: number
 }
 
-const recentRepositoriesThreshold = 7
-
 const getHostForRepository = (repo: RepositoryWithGitHubRepository) =>
   new URL(getHTMLURL(repo.gitHubRepository.endpoint)).host
 
@@ -84,8 +82,7 @@ export function groupRepositories(
   localRepositoryStateLookup: ReadonlyMap<number, ILocalRepositoryState>,
   recentRepositories: ReadonlyArray<number>
 ): ReadonlyArray<IFilterListGroup<IRepositoryListItem, RepositoryListGroup>> {
-  const includeRecentGroup = repositories.length > recentRepositoriesThreshold
-  const recentSet = includeRecentGroup ? new Set(recentRepositories) : undefined
+  // Don't include recent repositories group anymore
   const groups = new Map<string, RepoGroupItem>()
 
   const addToGroup = (group: RepositoryListGroup, repo: Repositoryish) => {
@@ -100,10 +97,7 @@ export function groupRepositories(
   }
 
   for (const repo of repositories) {
-    if (recentSet?.has(repo.id) && repo instanceof Repository) {
-      addToGroup({ kind: 'recent' }, repo)
-    }
-
+    // Only add to the natural group, not to Recent
     addToGroup(getGroupForRepository(repo), repo)
   }
 
@@ -193,12 +187,6 @@ const toSortedListItems = (
   const allNames = new Map<string, number>()
 
   for (const groupItem of groups.values()) {
-    // All items in the recent group are by definition present in another
-    // group and therefore we don't want to count them.
-    if (groupItem.group.kind === 'recent') {
-      continue
-    }
-
     for (const title of groupItem.repos.map(getDisplayTitle)) {
       allNames.set(title, (allNames.get(title) ?? 0) + 1)
       if (groupItem.group === group) {
@@ -220,11 +208,8 @@ const toSortedListItems = (
           // If the repository is in the enterprise group and has a duplicate
           // name in the group, we need to disambiguate it. We don't have to
           // disambiguate repositories in the 'dotcom' group because they are
-          // already grouped by owner. If the repository is in the 'recent'
-          // group and has a duplicate name in any group, we need to
-          // disambiguate it.
-          ((groupNames.get(title) ?? 0) > 1 && group.kind === 'enterprise') ||
-          ((allNames.get(title) ?? 0) > 1 && group.kind === 'recent'),
+          // already grouped by owner.
+          (groupNames.get(title) ?? 0) > 1 && group.kind === 'enterprise',
         aheadBehind: repoState?.aheadBehind ?? null,
         changedFilesCount: repoState?.changedFilesCount ?? 0,
       }
-- 
2.43.0

